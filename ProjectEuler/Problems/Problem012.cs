// <copyright file="Problem012.cs">
//     Copyright (c) 2017 All rights reserved.
// </copyright>
// <clrversion>4.0.30319.42000</clrversion>
// <author>Alex H.-L. Chan</author>

using System;
using System.Collections.Generic;
using Common.Framework.Core.Logging;
using ProjectEuler.Mathematics;

namespace ProjectEuler.Problems
{
    /// <summary>
    /// Highly divisible triangular number
    /// -
    /// The sequence of triangle numbers is generated by adding the natural numbers.
    /// So the 7-th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
    /// The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// Let us list the factors of the first seven triangle numbers:
    ///  1: 1
    ///  3: 1,3
    ///  6: 1,2,3,6
    /// 10: 1,2,5,10
    /// 15: 1,3,5,15
    /// 21: 1,3,7,21
    /// 28: 1,2,4,7,14,28
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// What is the value of the first triangle number to have over five hundred divisors?
    /// </summary>
    public class Problem012 : Problem
    {
        private int _triangularNumber;

        public Problem012()
        {
            Divisors = Convert.ToInt32(
                AppConfigParameters
                    .Keys[ProjectEulerConstants.Problem012Key]
                    .Collection[ProjectEulerConstants.Problem012DivisorsKey]);
            SieveGuess = Convert.ToInt32(
                AppConfigParameters
                    .Keys[ProjectEulerConstants.Problem012Key]
                    .Collection[ProjectEulerConstants.Problem012SieveGuessKey]);
        }

        public Problem012(
            int divisors,
            int sieveGuess)
        {
            Divisors = divisors;
            SieveGuess = sieveGuess;
        }

        public int Divisors { get; set; }

        public int SieveGuess { get; set; }

        public override dynamic Solve()
        {
            var primes = PrimeNumbers.GetPrimes(
                PrimeNumbers.SieveLimit(SieveGuess),
                PrimeNumbers.PrimesBySieveOfAtkin);

            // Primes generated via Sieve of Atkin may be insufficient if guess is too low (might be infinite loop).
            _triangularNumber = 3;
            var n = 3;
            while (Calculate(_triangularNumber, primes) < Divisors)
            {
                _triangularNumber += n;
                n++;
            }

            return _triangularNumber;
        }

        protected override void LogResult()
        {
            ResultMessage =
                "The value of the first triangular number to have over [" +
                Divisors +
                "] divisors is [" +
                _triangularNumber +
                "].";
            LogManager.Instance().LogResultMessage(ResultMessage);
        }

        private static int Calculate(int triangularNumber, IEnumerable<int> primes)
        {
            var divisors = 1;
            var remainder = triangularNumber;

            foreach (var prime in primes)
            {
                // Triangular number is prime.
                if (prime * prime > triangularNumber)
                {
                    // Triangular number and 1.
                    return 2 * divisors;
                }

                var exponent = 1;
                while (remainder % prime == 0)
                {
                    exponent++;
                    remainder /= prime;
                }

                divisors *= exponent;

                // If there is no remainder than all primes have been divided out.
                if (remainder == 1)
                {
                    return divisors;
                }
            }

            return divisors;
        }
    }
}
