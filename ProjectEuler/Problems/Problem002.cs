// <copyright file="Problem002.cs">
//     Copyright (c) 2017 All rights reserved.
// </copyright>
// <clrversion>4.0.30319.42000</clrversion>
// <author>Alex H.-L. Chan</author>

using System;
using Common.Framework.Core.Extensions;
using Common.Framework.Core.Logging;
using ProjectEuler.Mathematics;

namespace ProjectEuler.Problems
{
    /// <summary>
    /// Even Fibonacci numbers
    /// -
    /// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    /// By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    /// </summary>
    public class Problem002 : Problem
    {
        private int _fibonnaciSum;

        public Problem002()
        {
            Limit = Convert.ToInt32(
                AppConfigParameters
                    .Keys[ProjectEulerConstants.Problem002Key]
                    .Collection[ProjectEulerConstants.Problem002LimitKey]);
            Parity = AppConfigParameters
                .Keys[ProjectEulerConstants.Problem002Key]
                .Collection[ProjectEulerConstants.Problem002ParityKey];
        }

        public Problem002(
            int limit,
            string parity)
        {
            Limit = limit;
            Parity = parity;
        }

        public int Limit { get; set; }

        public string Parity { get; set; }

        public override dynamic Solve()
        {
            var parityValue = Parity.ToInteger();
            var remainder = parityValue.CalculateRemainder();

            var fn = 0;
            var fmp2 = 1;
            while (fn < Limit)
            {
                if (remainder == -1)
                {
                    _fibonnaciSum += fn;
                }
                else if (fn % parityValue == remainder)
                {
                    _fibonnaciSum += fn;
                }

                var fmp1 = fmp2;
                fmp2 = fn;
                fn = fmp1 + fmp2;
            }

            return _fibonnaciSum;
        }

        protected override void LogResult()
        {
            var messageType = (Parity.Length == 0) ? string.Empty : "-valued terms in the ";
            ResultMessage =
                "The sum of the " +
                Parity +
                messageType +
                "Fibonacci sequence whose values do not exceed [" +
                Limit +
                "] is [" +
                _fibonnaciSum +
                "].";
            LogManager.Instance().LogResultMessage(ResultMessage);
        }
    }
}
